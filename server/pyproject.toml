[project]
name = "av-mcp"
version = "0.2.0"
description = "Alpha Vantage MCP Server - Financial data APIs via Model Context Protocol"
requires-python = ">=3.13"
license = {text = "MIT"}
dependencies = [
    "awslabs-mcp-lambda-handler>=0.1.8",
    "click>=8.2.1",
    "loguru>=0.7.3",
    "mcp>=1.12.3",
    "python-dotenv>=1.1.1",
]

[project.scripts]
av-mcp = "src.stdio_server:main"

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.build.targets.wheel]
packages = ["src"]
include = [
    "lambda_function.py",
    "requirements.txt"
]

[dependency-groups]
dev = [
    "pytest>=7.0.0",
    "pytest-asyncio>=0.21.0",
    "black>=23.0.0",
    "ruff>=0.1.0"
]

[tool.black]
line-length = 100
target-version = ["py313"]
exclude = '''
/(
    \.git
  | \.venv
  | __pycache__
  | build
  | dist
)/
'''

[tool.ruff]
line-length = 100
target-version = "py313"
extend-exclude = [
    ".git",
    ".venv",
    "__pycache__",
    "build",
    "dist"
]

[tool.ruff.lint]
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
]
ignore = [
    "E501",  # line too long (handled by black)
]

[tool.ruff.lint.isort]
known-first-party = ["src"]

[tool.pytest.ini_options]
testpaths = ["tests"]
asyncio_mode = "auto"
asyncio_default_fixture_loop_scope = "function"
python_files = "test_*.py"
python_classes = "Test*"
python_functions = "test_*"
addopts = "-v --tb=short"
